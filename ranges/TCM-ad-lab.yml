ludus:
  - vm_name: "{{ range_id }}-TCM-DC01"
    hostname: "{{ range_id }}-TCM-DC01"
    template: win2022-server-x64-template
    vlan: 3
    ip_last_octet: 1
    ram_gb: 8
    cpus: 4
    testing:
      snapshot: true
      block_internet: true
    windows:
      sysprep: false
    domain:
      fqdn: shellcorp.localdomain
      role: primary-dc
    roles:
      - windows_config
      - badsectorlabs.ludus_adcs
    role_vars:
      windows_config:
        keyboard_layout: '00000414'
        display_language: '0409'
        username: 'localuser'
    ansible_groups:
      - tcm

  - vm_name: "{{ range_id }}-TCM-WS01"
    hostname: "{{ range_id }}-TCM-WS01"
    template: win11-22h2-x64-enterprise-template
    vlan: 3
    ip_last_octet: 2
    ram_gb: 8
    cpus: 4
    testing:
      snapshot: true
      block_internet: true
    windows:
      sysprep: false
    domain:
      fqdn: shellcorp.localdomain
      role: member
    roles:
      - windows_config
    role_vars:
      windows_config:
        keyboard_layout: '00000414'
        display_language: '0409'
        username: 'localuser'
    ansible_groups:
      - tcm
  - vm_name: "{{ range_id }}-TCM-WS02"
    hostname: "{{ range_id }}-TCM-WS02"
    template: win11-22h2-x64-enterprise-template
    vlan: 3
    ip_last_octet: 3
    ram_gb: 8
    cpus: 4
    testing:
      snapshot: true
      block_internet: true
    windows:
      sysprep: false
    domain:
      fqdn: shellcorp.localdomain
      role: member
    roles:
      - windows_config
    role_vars:
      windows_config:
        keyboard_layout: '00000414'
        display_language: '0409'
        username: 'localuser'
    ansible_groups:
      - tcm
  - vm_name: "{{ range_id }}-TCM-kali"
    hostname: "{{ range_id }}-TCM-kali"
    template: kali-x64-desktop-template
    vlan: 3
    ip_last_octet: 5
    ram_gb: 16
    cpus: 8
    linux: true
    testing:
      snapshot: true
      block_internet: true
    roles:
      - linux_config
    role_vars:
      linux_config:
        keyboard_layout: 'no'
        rdp: 'true'
        kali: 'true'
    ansible_groups:
      - tcm
router:
  vm_name: "{{ range_id }}-TCM-router"
  hostname: "{{ range_id }}-TCM-router"
  template: debian-11-x64-server-template
  ram_gb: 2
  ram_min_gb: 1
  cpus: 2

network: 
  inter_vlan_default: ACCEPT # The default rule to apply to traffic between VLANs. Default: ACCEPT
  external_default: ACCEPT   # The default rule to apply to traffic leaving the range out to the internet. Default: ACCEPT
  always_blocked_networks:   # Define any networks that ranges should never be able to reach (i.e. the LAN where the Ludus host is located)
    - 192.168.0.0/16         # entries must be in CIDR format
    - 172.16.0.0/12
  rules: # Specify rules to restrict or allow based on inter_vlan_default. Default: allow all traffic
    - name: Allow VLAN to VLAN traffic # The rule name will be added as a comment in iptables
      vlan_src: 3   # Traffic source VLAN
      vlan_dst: 3   # Traffic destination VLAN. Special value 'public' can be used which is converted to '! 10.ID.0.0/16' in the iptables rule
      ports: all
      protocol: all
      action: ACCEPT # ACCEPT|REJECT|DROP
    - name: Allow VLAN to INTERNET
      vlan_src: 3
      vlan_dst: public
      ports: all
      protocol: all
      action: ACCEPT

defaults:
  snapshot_with_RAM: true                  # When entering testing mode, capture the RAM state which allows reverting to a running VM
  stale_hours: 0                           # How many hours until a pre-existing snapshot should be deleted and retaken (if entering and exiting testing mode quickly)
  ad_domain_functional_level: Win2012R2    # The functional level of each Windows domain created by Ludus - options are: "Win2003", "Win2008", "Win2008R2", "Win2012", "Win2012R2", or "WinThreshold"
  ad_forest_functional_level: Win2012R2    # The functional level of each Windows forest created by Ludus - options are: "Win2003", "Win2008", "Win2008R2", "Win2012", "Win2012R2", or "WinThreshold"
  ad_domain_admin: domainadmin             # The domain admin username for every Windows domain
  ad_domain_admin_password: password       # The domain admin password for every Windows domain
  ad_domain_user: domainuser               # The domain user username for every Windows domain
  ad_domain_user_password: password        # The domain user password for every Windows domain
  ad_domain_safe_mode_password: password   # The domain safe mode password for every Windows domain
  timezone: Europe/Oslo         
